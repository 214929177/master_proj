package cn.edu.hfut.lilei.shareboard.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.hfut.lilei.shareboard.greendao.entity.Msg;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSG".
*/
public class MsgDao extends AbstractDao<Msg, Long> {

    public static final String TABLENAME = "MSG";

    /**
     * Properties of entity Msg.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Email = new Property(1, String.class, "email", false, "EMAIL");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property FamilyName = new Property(4, String.class, "familyName", false, "FAMILY_NAME");
        public final static Property GivenName = new Property(5, String.class, "givenName", false, "GIVEN_NAME");
        public final static Property Feature = new Property(6, String.class, "feature", false, "FEATURE");
        public final static Property Avatar = new Property(7, String.class, "avatar", false, "AVATAR");
        public final static Property Status = new Property(8, int.class, "status", false, "STATUS");
        public final static Property MsgTime = new Property(9, Long.class, "msgTime", false, "MSG_TIME");
        public final static Property Tag = new Property(10, String.class, "tag", false, "TAG");
    }


    public MsgDao(DaoConfig config) {
        super(config);
    }
    
    public MsgDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSG\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"EMAIL\" TEXT," + // 1: email
                "\"TITLE\" TEXT," + // 2: title
                "\"CONTENT\" TEXT," + // 3: content
                "\"FAMILY_NAME\" TEXT," + // 4: familyName
                "\"GIVEN_NAME\" TEXT," + // 5: givenName
                "\"FEATURE\" TEXT," + // 6: feature
                "\"AVATAR\" TEXT," + // 7: avatar
                "\"STATUS\" INTEGER NOT NULL ," + // 8: status
                "\"MSG_TIME\" INTEGER," + // 9: msgTime
                "\"TAG\" TEXT);"); // 10: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String familyName = entity.getFamilyName();
        if (familyName != null) {
            stmt.bindString(5, familyName);
        }
 
        String givenName = entity.getGivenName();
        if (givenName != null) {
            stmt.bindString(6, givenName);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(7, feature);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
        stmt.bindLong(9, entity.getStatus());
 
        Long msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindLong(10, msgTime);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(11, tag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Msg entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(2, email);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String familyName = entity.getFamilyName();
        if (familyName != null) {
            stmt.bindString(5, familyName);
        }
 
        String givenName = entity.getGivenName();
        if (givenName != null) {
            stmt.bindString(6, givenName);
        }
 
        String feature = entity.getFeature();
        if (feature != null) {
            stmt.bindString(7, feature);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(8, avatar);
        }
        stmt.bindLong(9, entity.getStatus());
 
        Long msgTime = entity.getMsgTime();
        if (msgTime != null) {
            stmt.bindLong(10, msgTime);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(11, tag);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Msg readEntity(Cursor cursor, int offset) {
        Msg entity = new Msg( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // email
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // familyName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // givenName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // feature
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // avatar
            cursor.getInt(offset + 8), // status
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // msgTime
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Msg entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmail(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFamilyName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGivenName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFeature(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAvatar(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setStatus(cursor.getInt(offset + 8));
        entity.setMsgTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setTag(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Msg entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Msg entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Msg entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
